package api

import (
	"backend/global"
	"backend/models"
	"fmt"
	"net/http"
	"time"

	"github.com/enenisme/poc_scan"
	"github.com/gin-gonic/gin"
)

type VulnerabilityHandler struct {
	// 可以添加依赖服务
}

func NewVulnerabilityHandler() *VulnerabilityHandler {
	return &VulnerabilityHandler{}
}

func (h *VulnerabilityHandler) HandleVulnerabilityScan(c *gin.Context) {
	var request struct {
		Target string `json:"target" binding:"required"`
	}

	if err := c.ShouldBindJSON(&request); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{
			"error": "无效的请求参数: " + err.Error(),
		})

		global.DB.Create(&models.ScanHistory{
			TaskType:  "vulnerability",
			Target:    request.Target,
			Status:    "failed",
			Result:    fmt.Sprintf("%v", err),
			StartTime: time.Now(),
			EndTime:   time.Now(),
		})
		return
	}

	results := h.processVulnerabilityScan(request.Target)
	global.DB.Create(&models.ScanHistory{
		TaskType:  "vulnerability",
		Target:    request.Target,
		Status:    "completed",
		Result:    fmt.Sprintf("%v", results),
		StartTime: time.Now(),
		EndTime:   time.Now(),
	})

	c.JSON(http.StatusOK, gin.H{
		"message": "扫描完成",
		"data":    results,
	})
}

func (h *VulnerabilityHandler) processVulnerabilityScan(target string) []poc_scan.PocScanResult {
	poc := poc_scan.NewPocScan(target, "C:\\Users\\张裕波\\Desktop\\project\\web\\backend\\poc")
	poc.Scan()
	return poc.Results
}
